//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace GraphMolWrap {

public class SubstructLibrary : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SubstructLibrary(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SubstructLibrary obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SubstructLibrary() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RDKFuncsPINVOKE.delete_SubstructLibrary(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SubstructLibrary() : this(RDKFuncsPINVOKE.new_SubstructLibrary__SWIG_0(), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public SubstructLibrary(MolHolderBase molecules) : this(RDKFuncsPINVOKE.new_SubstructLibrary__SWIG_1(MolHolderBase.getCPtr(molecules)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public SubstructLibrary(MolHolderBase molecules, FPHolderBase fingerprints) : this(RDKFuncsPINVOKE.new_SubstructLibrary__SWIG_2(MolHolderBase.getCPtr(molecules), FPHolderBase.getCPtr(fingerprints)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public SubstructLibrary(MolHolderBase molecules, KeyHolderBase keys) : this(RDKFuncsPINVOKE.new_SubstructLibrary__SWIG_3(MolHolderBase.getCPtr(molecules), KeyHolderBase.getCPtr(keys)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public SubstructLibrary(MolHolderBase molecules, FPHolderBase fingerprints, KeyHolderBase keys) : this(RDKFuncsPINVOKE.new_SubstructLibrary__SWIG_4(MolHolderBase.getCPtr(molecules), FPHolderBase.getCPtr(fingerprints), KeyHolderBase.getCPtr(keys)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public SubstructLibrary(string pickle) : this(RDKFuncsPINVOKE.new_SubstructLibrary__SWIG_5(pickle), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public MolHolderBase getMolHolder() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.SubstructLibrary_getMolHolder__SWIG_0(swigCPtr);
    MolHolderBase ret = (cPtr == global::System.IntPtr.Zero) ? null : new MolHolderBase(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FPHolderBase getFpHolder() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.SubstructLibrary_getFpHolder__SWIG_0(swigCPtr);
    FPHolderBase ret = (cPtr == global::System.IntPtr.Zero) ? null : new FPHolderBase(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public KeyHolderBase getKeyHolder() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.SubstructLibrary_getKeyHolder__SWIG_0(swigCPtr);
    KeyHolderBase ret = (cPtr == global::System.IntPtr.Zero) ? null : new KeyHolderBase(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MolHolderBase getMolecules() {
    MolHolderBase ret = new MolHolderBase(RDKFuncsPINVOKE.SubstructLibrary_getMolecules(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FPHolderBase getFingerprints() {
    FPHolderBase ret = new FPHolderBase(RDKFuncsPINVOKE.SubstructLibrary_getFingerprints__SWIG_0(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public KeyHolderBase getKeys() {
    KeyHolderBase ret = new KeyHolderBase(RDKFuncsPINVOKE.SubstructLibrary_getKeys__SWIG_0(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint addMol(ROMol mol) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_addMol(swigCPtr, ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(ROMol query, uint startIdx, uint endIdx, SubstructMatchParameters arg3, int numThreads, int maxResults) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_15(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx, SubstructMatchParameters.getCPtr(arg3), numThreads, maxResults), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(ROMol query, uint startIdx, uint endIdx, SubstructMatchParameters arg3, int numThreads) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_16(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx, SubstructMatchParameters.getCPtr(arg3), numThreads), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(ROMol query, uint startIdx, uint endIdx, SubstructMatchParameters arg3) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_17(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx, SubstructMatchParameters.getCPtr(arg3)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(SWIGTYPE_p_RDKit__MolBundle query, uint startIdx, uint endIdx, SubstructMatchParameters arg3, int numThreads, int maxResults) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_18(swigCPtr, SWIGTYPE_p_RDKit__MolBundle.getCPtr(query), startIdx, endIdx, SubstructMatchParameters.getCPtr(arg3), numThreads, maxResults), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(SWIGTYPE_p_RDKit__MolBundle query, uint startIdx, uint endIdx, SubstructMatchParameters arg3, int numThreads) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_19(swigCPtr, SWIGTYPE_p_RDKit__MolBundle.getCPtr(query), startIdx, endIdx, SubstructMatchParameters.getCPtr(arg3), numThreads), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(SWIGTYPE_p_RDKit__MolBundle query, uint startIdx, uint endIdx, SubstructMatchParameters arg3) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_20(swigCPtr, SWIGTYPE_p_RDKit__MolBundle.getCPtr(query), startIdx, endIdx, SubstructMatchParameters.getCPtr(arg3)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(TautomerQuery query, uint startIdx, uint endIdx, SubstructMatchParameters arg3, int numThreads, int maxResults) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_21(swigCPtr, TautomerQuery.getCPtr(query), startIdx, endIdx, SubstructMatchParameters.getCPtr(arg3), numThreads, maxResults), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(TautomerQuery query, uint startIdx, uint endIdx, SubstructMatchParameters arg3, int numThreads) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_22(swigCPtr, TautomerQuery.getCPtr(query), startIdx, endIdx, SubstructMatchParameters.getCPtr(arg3), numThreads), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(TautomerQuery query, uint startIdx, uint endIdx, SubstructMatchParameters arg3) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_23(swigCPtr, TautomerQuery.getCPtr(query), startIdx, endIdx, SubstructMatchParameters.getCPtr(arg3)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(ROMol query, uint startIdx, uint endIdx, SubstructMatchParameters arg3, int numThreads) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_12(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx, SubstructMatchParameters.getCPtr(arg3), numThreads);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(ROMol query, uint startIdx, uint endIdx, SubstructMatchParameters arg3) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_13(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx, SubstructMatchParameters.getCPtr(arg3));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(TautomerQuery query, uint startIdx, uint endIdx, SubstructMatchParameters arg3, int numThreads) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_14(swigCPtr, TautomerQuery.getCPtr(query), startIdx, endIdx, SubstructMatchParameters.getCPtr(arg3), numThreads);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(TautomerQuery query, uint startIdx, uint endIdx, SubstructMatchParameters arg3) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_15(swigCPtr, TautomerQuery.getCPtr(query), startIdx, endIdx, SubstructMatchParameters.getCPtr(arg3));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(SWIGTYPE_p_RDKit__MolBundle query, uint startIdx, uint endIdx, SubstructMatchParameters arg3, int numThreads) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_16(swigCPtr, SWIGTYPE_p_RDKit__MolBundle.getCPtr(query), startIdx, endIdx, SubstructMatchParameters.getCPtr(arg3), numThreads);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(SWIGTYPE_p_RDKit__MolBundle query, uint startIdx, uint endIdx, SubstructMatchParameters arg3) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_17(swigCPtr, SWIGTYPE_p_RDKit__MolBundle.getCPtr(query), startIdx, endIdx, SubstructMatchParameters.getCPtr(arg3));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(ROMol query, uint startIdx, uint endIdx, SubstructMatchParameters arg3, int numThreads) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_12(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx, SubstructMatchParameters.getCPtr(arg3), numThreads);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(ROMol query, uint startIdx, uint endIdx, SubstructMatchParameters arg3) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_13(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx, SubstructMatchParameters.getCPtr(arg3));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(TautomerQuery query, uint startIdx, uint endIdx, SubstructMatchParameters arg3, int numThreads) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_14(swigCPtr, TautomerQuery.getCPtr(query), startIdx, endIdx, SubstructMatchParameters.getCPtr(arg3), numThreads);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(TautomerQuery query, uint startIdx, uint endIdx, SubstructMatchParameters arg3) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_15(swigCPtr, TautomerQuery.getCPtr(query), startIdx, endIdx, SubstructMatchParameters.getCPtr(arg3));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(SWIGTYPE_p_RDKit__MolBundle query, uint startIdx, uint endIdx, SubstructMatchParameters arg3, int numThreads) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_16(swigCPtr, SWIGTYPE_p_RDKit__MolBundle.getCPtr(query), startIdx, endIdx, SubstructMatchParameters.getCPtr(arg3), numThreads);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(SWIGTYPE_p_RDKit__MolBundle query, uint startIdx, uint endIdx, SubstructMatchParameters arg3) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_17(swigCPtr, SWIGTYPE_p_RDKit__MolBundle.getCPtr(query), startIdx, endIdx, SubstructMatchParameters.getCPtr(arg3));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ROMol getMol(uint idx) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.SubstructLibrary_getMol(swigCPtr, idx);
    ROMol ret = (cPtr == global::System.IntPtr.Zero) ? null : new ROMol(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint size() {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_size(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSearchOrder(UInt_Vect order) {
    RDKFuncsPINVOKE.SubstructLibrary_setSearchOrder(swigCPtr, UInt_Vect.getCPtr(order));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public UInt_Vect getSearchOrder() {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getSearchOrder__SWIG_0(swigCPtr), false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void resetHolders() {
    RDKFuncsPINVOKE.SubstructLibrary_resetHolders(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void toStream(SWIGTYPE_p_std__ostream ss) {
    RDKFuncsPINVOKE.SubstructLibrary_toStream(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(ss));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public string Serialize() {
    string ret = RDKFuncsPINVOKE.SubstructLibrary_Serialize(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void initFromStream(SWIGTYPE_p_std__istream ss) {
    RDKFuncsPINVOKE.SubstructLibrary_initFromStream(swigCPtr, SWIGTYPE_p_std__istream.getCPtr(ss));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void initFromString(string text) {
    RDKFuncsPINVOKE.SubstructLibrary_initFromString(swigCPtr, text);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public SubstructLibrary(UChar_Vect data) : this(RDKFuncsPINVOKE.new_SubstructLibrary__SWIG_6(UChar_Vect.getCPtr(data)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool canSerialize() {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_canSerialize(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(ROMol query, bool recursionPossible, bool useChirality, bool useQueryQueryMatches, int numThreads, int maxResults) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_24(swigCPtr, ROMol.getCPtr(query), recursionPossible, useChirality, useQueryQueryMatches, numThreads, maxResults), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(ROMol query, bool recursionPossible, bool useChirality, bool useQueryQueryMatches, int numThreads) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_25(swigCPtr, ROMol.getCPtr(query), recursionPossible, useChirality, useQueryQueryMatches, numThreads), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(ROMol query, bool recursionPossible, bool useChirality, bool useQueryQueryMatches) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_26(swigCPtr, ROMol.getCPtr(query), recursionPossible, useChirality, useQueryQueryMatches), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(ROMol query, bool recursionPossible, bool useChirality) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_27(swigCPtr, ROMol.getCPtr(query), recursionPossible, useChirality), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(ROMol query, bool recursionPossible) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_28(swigCPtr, ROMol.getCPtr(query), recursionPossible), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(ROMol query) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_29(swigCPtr, ROMol.getCPtr(query)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(ROMol query, SubstructMatchParameters arg1, int numThreads, int maxResults) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_30(swigCPtr, ROMol.getCPtr(query), SubstructMatchParameters.getCPtr(arg1), numThreads, maxResults), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(ROMol query, SubstructMatchParameters arg1, int numThreads) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_31(swigCPtr, ROMol.getCPtr(query), SubstructMatchParameters.getCPtr(arg1), numThreads), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(ROMol query, SubstructMatchParameters arg1) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_32(swigCPtr, ROMol.getCPtr(query), SubstructMatchParameters.getCPtr(arg1)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(ROMol query, uint startIdx, uint endIdx, bool recursionPossible, bool useChirality, bool useQueryQueryMatches, int numThreads, int maxResults) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_33(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx, recursionPossible, useChirality, useQueryQueryMatches, numThreads, maxResults), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(ROMol query, uint startIdx, uint endIdx, bool recursionPossible, bool useChirality, bool useQueryQueryMatches, int numThreads) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_34(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx, recursionPossible, useChirality, useQueryQueryMatches, numThreads), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(ROMol query, uint startIdx, uint endIdx, bool recursionPossible, bool useChirality, bool useQueryQueryMatches) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_35(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx, recursionPossible, useChirality, useQueryQueryMatches), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(ROMol query, uint startIdx, uint endIdx, bool recursionPossible, bool useChirality) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_36(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx, recursionPossible, useChirality), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(ROMol query, uint startIdx, uint endIdx, bool recursionPossible) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_37(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx, recursionPossible), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(ROMol query, uint startIdx, uint endIdx) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_38(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(TautomerQuery query, bool recursionPossible, bool useChirality, bool useQueryQueryMatches, int numThreads, int maxResults) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_39(swigCPtr, TautomerQuery.getCPtr(query), recursionPossible, useChirality, useQueryQueryMatches, numThreads, maxResults), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(TautomerQuery query, bool recursionPossible, bool useChirality, bool useQueryQueryMatches, int numThreads) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_40(swigCPtr, TautomerQuery.getCPtr(query), recursionPossible, useChirality, useQueryQueryMatches, numThreads), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(TautomerQuery query, bool recursionPossible, bool useChirality, bool useQueryQueryMatches) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_41(swigCPtr, TautomerQuery.getCPtr(query), recursionPossible, useChirality, useQueryQueryMatches), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(TautomerQuery query, bool recursionPossible, bool useChirality) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_42(swigCPtr, TautomerQuery.getCPtr(query), recursionPossible, useChirality), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(TautomerQuery query, bool recursionPossible) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_43(swigCPtr, TautomerQuery.getCPtr(query), recursionPossible), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(TautomerQuery query) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_44(swigCPtr, TautomerQuery.getCPtr(query)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(TautomerQuery query, SubstructMatchParameters arg1, int numThreads, int maxResults) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_45(swigCPtr, TautomerQuery.getCPtr(query), SubstructMatchParameters.getCPtr(arg1), numThreads, maxResults), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(TautomerQuery query, SubstructMatchParameters arg1, int numThreads) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_46(swigCPtr, TautomerQuery.getCPtr(query), SubstructMatchParameters.getCPtr(arg1), numThreads), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(TautomerQuery query, SubstructMatchParameters arg1) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_47(swigCPtr, TautomerQuery.getCPtr(query), SubstructMatchParameters.getCPtr(arg1)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(TautomerQuery query, uint startIdx, uint endIdx, bool recursionPossible, bool useChirality, bool useQueryQueryMatches, int numThreads, int maxResults) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_48(swigCPtr, TautomerQuery.getCPtr(query), startIdx, endIdx, recursionPossible, useChirality, useQueryQueryMatches, numThreads, maxResults), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(TautomerQuery query, uint startIdx, uint endIdx, bool recursionPossible, bool useChirality, bool useQueryQueryMatches, int numThreads) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_49(swigCPtr, TautomerQuery.getCPtr(query), startIdx, endIdx, recursionPossible, useChirality, useQueryQueryMatches, numThreads), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(TautomerQuery query, uint startIdx, uint endIdx, bool recursionPossible, bool useChirality, bool useQueryQueryMatches) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_50(swigCPtr, TautomerQuery.getCPtr(query), startIdx, endIdx, recursionPossible, useChirality, useQueryQueryMatches), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(TautomerQuery query, uint startIdx, uint endIdx, bool recursionPossible, bool useChirality) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_51(swigCPtr, TautomerQuery.getCPtr(query), startIdx, endIdx, recursionPossible, useChirality), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(TautomerQuery query, uint startIdx, uint endIdx, bool recursionPossible) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_52(swigCPtr, TautomerQuery.getCPtr(query), startIdx, endIdx, recursionPossible), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getMatches(TautomerQuery query, uint startIdx, uint endIdx) {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstructLibrary_getMatches__SWIG_53(swigCPtr, TautomerQuery.getCPtr(query), startIdx, endIdx), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(ROMol query, bool recursionPossible, bool useChirality, bool useQueryQueryMatches, int numThreads) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_18(swigCPtr, ROMol.getCPtr(query), recursionPossible, useChirality, useQueryQueryMatches, numThreads);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(ROMol query, bool recursionPossible, bool useChirality, bool useQueryQueryMatches) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_19(swigCPtr, ROMol.getCPtr(query), recursionPossible, useChirality, useQueryQueryMatches);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(ROMol query, bool recursionPossible, bool useChirality) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_20(swigCPtr, ROMol.getCPtr(query), recursionPossible, useChirality);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(ROMol query, bool recursionPossible) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_21(swigCPtr, ROMol.getCPtr(query), recursionPossible);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(ROMol query) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_22(swigCPtr, ROMol.getCPtr(query));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(ROMol query, SubstructMatchParameters arg1, int numThreads) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_23(swigCPtr, ROMol.getCPtr(query), SubstructMatchParameters.getCPtr(arg1), numThreads);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(ROMol query, SubstructMatchParameters arg1) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_24(swigCPtr, ROMol.getCPtr(query), SubstructMatchParameters.getCPtr(arg1));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(ROMol query, uint startIdx, uint endIdx, bool recursionPossible, bool useChirality, bool useQueryQueryMatches, int numThreads) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_25(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx, recursionPossible, useChirality, useQueryQueryMatches, numThreads);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(ROMol query, uint startIdx, uint endIdx, bool recursionPossible, bool useChirality, bool useQueryQueryMatches) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_26(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx, recursionPossible, useChirality, useQueryQueryMatches);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(ROMol query, uint startIdx, uint endIdx, bool recursionPossible, bool useChirality) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_27(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx, recursionPossible, useChirality);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(ROMol query, uint startIdx, uint endIdx, bool recursionPossible) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_28(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx, recursionPossible);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(ROMol query, uint startIdx, uint endIdx) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_29(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(TautomerQuery query, bool recursionPossible, bool useChirality, bool useQueryQueryMatches, int numThreads) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_30(swigCPtr, TautomerQuery.getCPtr(query), recursionPossible, useChirality, useQueryQueryMatches, numThreads);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(TautomerQuery query, bool recursionPossible, bool useChirality, bool useQueryQueryMatches) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_31(swigCPtr, TautomerQuery.getCPtr(query), recursionPossible, useChirality, useQueryQueryMatches);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(TautomerQuery query, bool recursionPossible, bool useChirality) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_32(swigCPtr, TautomerQuery.getCPtr(query), recursionPossible, useChirality);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(TautomerQuery query, bool recursionPossible) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_33(swigCPtr, TautomerQuery.getCPtr(query), recursionPossible);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(TautomerQuery query) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_34(swigCPtr, TautomerQuery.getCPtr(query));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(TautomerQuery query, SubstructMatchParameters arg1, int numThreads) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_35(swigCPtr, TautomerQuery.getCPtr(query), SubstructMatchParameters.getCPtr(arg1), numThreads);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(TautomerQuery query, SubstructMatchParameters arg1) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_36(swigCPtr, TautomerQuery.getCPtr(query), SubstructMatchParameters.getCPtr(arg1));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(TautomerQuery query, uint startIdx, uint endIdx, bool recursionPossible, bool useChirality, bool useQueryQueryMatches, int numThreads) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_37(swigCPtr, TautomerQuery.getCPtr(query), startIdx, endIdx, recursionPossible, useChirality, useQueryQueryMatches, numThreads);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(TautomerQuery query, uint startIdx, uint endIdx, bool recursionPossible, bool useChirality, bool useQueryQueryMatches) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_38(swigCPtr, TautomerQuery.getCPtr(query), startIdx, endIdx, recursionPossible, useChirality, useQueryQueryMatches);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(TautomerQuery query, uint startIdx, uint endIdx, bool recursionPossible, bool useChirality) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_39(swigCPtr, TautomerQuery.getCPtr(query), startIdx, endIdx, recursionPossible, useChirality);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(TautomerQuery query, uint startIdx, uint endIdx, bool recursionPossible) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_40(swigCPtr, TautomerQuery.getCPtr(query), startIdx, endIdx, recursionPossible);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint countMatches(TautomerQuery query, uint startIdx, uint endIdx) {
    uint ret = RDKFuncsPINVOKE.SubstructLibrary_countMatches__SWIG_41(swigCPtr, TautomerQuery.getCPtr(query), startIdx, endIdx);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(ROMol query, bool recursionPossible, bool useChirality, bool useQueryQueryMatches, int numThreads) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_18(swigCPtr, ROMol.getCPtr(query), recursionPossible, useChirality, useQueryQueryMatches, numThreads);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(ROMol query, bool recursionPossible, bool useChirality, bool useQueryQueryMatches) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_19(swigCPtr, ROMol.getCPtr(query), recursionPossible, useChirality, useQueryQueryMatches);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(ROMol query, bool recursionPossible, bool useChirality) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_20(swigCPtr, ROMol.getCPtr(query), recursionPossible, useChirality);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(ROMol query, bool recursionPossible) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_21(swigCPtr, ROMol.getCPtr(query), recursionPossible);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(ROMol query) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_22(swigCPtr, ROMol.getCPtr(query));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(ROMol query, SubstructMatchParameters arg1, int numThreads) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_23(swigCPtr, ROMol.getCPtr(query), SubstructMatchParameters.getCPtr(arg1), numThreads);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(ROMol query, SubstructMatchParameters arg1) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_24(swigCPtr, ROMol.getCPtr(query), SubstructMatchParameters.getCPtr(arg1));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(ROMol query, uint startIdx, uint endIdx, bool recursionPossible, bool useChirality, bool useQueryQueryMatches, int numThreads) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_25(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx, recursionPossible, useChirality, useQueryQueryMatches, numThreads);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(ROMol query, uint startIdx, uint endIdx, bool recursionPossible, bool useChirality, bool useQueryQueryMatches) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_26(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx, recursionPossible, useChirality, useQueryQueryMatches);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(ROMol query, uint startIdx, uint endIdx, bool recursionPossible, bool useChirality) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_27(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx, recursionPossible, useChirality);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(ROMol query, uint startIdx, uint endIdx, bool recursionPossible) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_28(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx, recursionPossible);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(ROMol query, uint startIdx, uint endIdx) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_29(swigCPtr, ROMol.getCPtr(query), startIdx, endIdx);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(TautomerQuery query, bool recursionPossible, bool useChirality, bool useQueryQueryMatches, int numThreads) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_30(swigCPtr, TautomerQuery.getCPtr(query), recursionPossible, useChirality, useQueryQueryMatches, numThreads);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(TautomerQuery query, bool recursionPossible, bool useChirality, bool useQueryQueryMatches) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_31(swigCPtr, TautomerQuery.getCPtr(query), recursionPossible, useChirality, useQueryQueryMatches);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(TautomerQuery query, bool recursionPossible, bool useChirality) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_32(swigCPtr, TautomerQuery.getCPtr(query), recursionPossible, useChirality);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(TautomerQuery query, bool recursionPossible) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_33(swigCPtr, TautomerQuery.getCPtr(query), recursionPossible);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(TautomerQuery query) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_34(swigCPtr, TautomerQuery.getCPtr(query));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(TautomerQuery query, SubstructMatchParameters arg1, int numThreads) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_35(swigCPtr, TautomerQuery.getCPtr(query), SubstructMatchParameters.getCPtr(arg1), numThreads);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(TautomerQuery query, SubstructMatchParameters arg1) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_36(swigCPtr, TautomerQuery.getCPtr(query), SubstructMatchParameters.getCPtr(arg1));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(TautomerQuery query, uint startIdx, uint endIdx, bool recursionPossible, bool useChirality, bool useQueryQueryMatches, int numThreads) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_37(swigCPtr, TautomerQuery.getCPtr(query), startIdx, endIdx, recursionPossible, useChirality, useQueryQueryMatches, numThreads);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(TautomerQuery query, uint startIdx, uint endIdx, bool recursionPossible, bool useChirality, bool useQueryQueryMatches) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_38(swigCPtr, TautomerQuery.getCPtr(query), startIdx, endIdx, recursionPossible, useChirality, useQueryQueryMatches);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(TautomerQuery query, uint startIdx, uint endIdx, bool recursionPossible, bool useChirality) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_39(swigCPtr, TautomerQuery.getCPtr(query), startIdx, endIdx, recursionPossible, useChirality);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(TautomerQuery query, uint startIdx, uint endIdx, bool recursionPossible) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_40(swigCPtr, TautomerQuery.getCPtr(query), startIdx, endIdx, recursionPossible);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMatch(TautomerQuery query, uint startIdx, uint endIdx) {
    bool ret = RDKFuncsPINVOKE.SubstructLibrary_hasMatch__SWIG_41(swigCPtr, TautomerQuery.getCPtr(query), startIdx, endIdx);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
