//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace GraphMolWrap {

public class TautomerQuery : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal TautomerQuery(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TautomerQuery obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~TautomerQuery() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          RDKFuncsPINVOKE.delete_TautomerQuery(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public TautomerQuery(ROMol_Vect tautomers, ROMol templateMolecule, Sizet_Vect modifiedAtoms, Sizet_Vect modifiedBonds) : this(RDKFuncsPINVOKE.new_TautomerQuery__SWIG_0(ROMol_Vect.getCPtr(tautomers), ROMol.getCPtr(templateMolecule), Sizet_Vect.getCPtr(modifiedAtoms), Sizet_Vect.getCPtr(modifiedBonds)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public TautomerQuery(TautomerQuery other) : this(RDKFuncsPINVOKE.new_TautomerQuery__SWIG_1(TautomerQuery.getCPtr(other)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public static TautomerQuery fromMol(ROMol molecule, string tautomerTransformFile) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.TautomerQuery_fromMol__SWIG_0(ROMol.getCPtr(molecule), tautomerTransformFile);
    TautomerQuery ret = (cPtr == global::System.IntPtr.Zero) ? null : new TautomerQuery(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TautomerQuery fromMol(ROMol molecule) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.TautomerQuery_fromMol__SWIG_1(ROMol.getCPtr(molecule));
    TautomerQuery ret = (cPtr == global::System.IntPtr.Zero) ? null : new TautomerQuery(cPtr, true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Match_Vect_Vect substructOf(ROMol mol, SubstructMatchParameters arg1, ROMol_Vect matchingTautomers) {
    Match_Vect_Vect ret = new Match_Vect_Vect(RDKFuncsPINVOKE.TautomerQuery_substructOf__SWIG_0(swigCPtr, ROMol.getCPtr(mol), SubstructMatchParameters.getCPtr(arg1), ROMol_Vect.getCPtr(matchingTautomers)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Match_Vect_Vect substructOf(ROMol mol, SubstructMatchParameters arg1) {
    Match_Vect_Vect ret = new Match_Vect_Vect(RDKFuncsPINVOKE.TautomerQuery_substructOf__SWIG_1(swigCPtr, ROMol.getCPtr(mol), SubstructMatchParameters.getCPtr(arg1)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Match_Vect_Vect substructOf(ROMol mol) {
    Match_Vect_Vect ret = new Match_Vect_Vect(RDKFuncsPINVOKE.TautomerQuery_substructOf__SWIG_2(swigCPtr, ROMol.getCPtr(mol)), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isSubstructOf(ROMol mol, SubstructMatchParameters arg1) {
    bool ret = RDKFuncsPINVOKE.TautomerQuery_isSubstructOf__SWIG_0(swigCPtr, ROMol.getCPtr(mol), SubstructMatchParameters.getCPtr(arg1));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isSubstructOf(ROMol mol) {
    bool ret = RDKFuncsPINVOKE.TautomerQuery_isSubstructOf__SWIG_1(swigCPtr, ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ExplicitBitVect patternFingerprintTemplate(uint fpSize) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.TautomerQuery_patternFingerprintTemplate__SWIG_0(swigCPtr, fpSize);
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ExplicitBitVect patternFingerprintTemplate() {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.TautomerQuery_patternFingerprintTemplate__SWIG_1(swigCPtr);
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect patternFingerprintTarget(ROMol target, uint fpSize) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.TautomerQuery_patternFingerprintTarget__SWIG_0(ROMol.getCPtr(target), fpSize);
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplicitBitVect patternFingerprintTarget(ROMol target) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.TautomerQuery_patternFingerprintTarget__SWIG_1(ROMol.getCPtr(target));
    ExplicitBitVect ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExplicitBitVect(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ROMol getTemplateMolecule() {
    ROMol ret = new ROMol(RDKFuncsPINVOKE.TautomerQuery_getTemplateMolecule(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ROMol_Vect getTautomers() {
    ROMol_Vect ret = new ROMol_Vect(RDKFuncsPINVOKE.TautomerQuery_getTautomers(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Sizet_Vect getModifiedAtoms() {
    Sizet_Vect ret = new Sizet_Vect(RDKFuncsPINVOKE.TautomerQuery_getModifiedAtoms(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Sizet_Vect getModifiedBonds() {
    Sizet_Vect ret = new Sizet_Vect(RDKFuncsPINVOKE.TautomerQuery_getModifiedBonds(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
