//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace GraphMolWrap {

public class SubstanceGroup : RDProps {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal SubstanceGroup(global::System.IntPtr cPtr, bool cMemoryOwn) : base(RDKFuncsPINVOKE.SubstanceGroup_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SubstanceGroup obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SubstanceGroup() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          RDKFuncsPINVOKE.delete_SubstanceGroup(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public class AttachPoint : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal AttachPoint(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AttachPoint obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~AttachPoint() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            RDKFuncsPINVOKE.delete_SubstanceGroup_AttachPoint(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public uint aIdx {
      set {
        RDKFuncsPINVOKE.SubstanceGroup_AttachPoint_aIdx_set(swigCPtr, value);
        if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        uint ret = RDKFuncsPINVOKE.SubstanceGroup_AttachPoint_aIdx_get(swigCPtr);
        if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public int lvIdx {
      set {
        RDKFuncsPINVOKE.SubstanceGroup_AttachPoint_lvIdx_set(swigCPtr, value);
        if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        int ret = RDKFuncsPINVOKE.SubstanceGroup_AttachPoint_lvIdx_get(swigCPtr);
        if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public string id {
      set {
        RDKFuncsPINVOKE.SubstanceGroup_AttachPoint_id_set(swigCPtr, value);
        if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        string ret = RDKFuncsPINVOKE.SubstanceGroup_AttachPoint_id_get(swigCPtr);
        if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public AttachPoint() : this(RDKFuncsPINVOKE.new_SubstanceGroup_AttachPoint(), true) {
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public class CState : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal CState(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CState obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~CState() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            RDKFuncsPINVOKE.delete_SubstanceGroup_CState(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public uint bondIdx {
      set {
        RDKFuncsPINVOKE.SubstanceGroup_CState_bondIdx_set(swigCPtr, value);
        if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        uint ret = RDKFuncsPINVOKE.SubstanceGroup_CState_bondIdx_get(swigCPtr);
        if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public Point3D vector {
      set {
        RDKFuncsPINVOKE.SubstanceGroup_CState_vector_set(swigCPtr, Point3D.getCPtr(value));
        if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = RDKFuncsPINVOKE.SubstanceGroup_CState_vector_get(swigCPtr);
        Point3D ret = (cPtr == global::System.IntPtr.Zero) ? null : new Point3D(cPtr, false);
        if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public CState() : this(RDKFuncsPINVOKE.new_SubstanceGroup_CState(), true) {
      if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public SubstanceGroup(ROMol owning_mol, string type) : this(RDKFuncsPINVOKE.new_SubstanceGroup__SWIG_0(ROMol.getCPtr(owning_mol), type), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public SubstanceGroup(SubstanceGroup other) : this(RDKFuncsPINVOKE.new_SubstanceGroup__SWIG_1(SubstanceGroup.getCPtr(other)), true) {
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool hasOwningMol() {
    bool ret = RDKFuncsPINVOKE.SubstanceGroup_hasOwningMol(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ROMol getOwningMol() {
    ROMol ret = new ROMol(RDKFuncsPINVOKE.SubstanceGroup_getOwningMol(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getIsValid() {
    bool ret = RDKFuncsPINVOKE.SubstanceGroup_getIsValid(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setIsValid(bool isValid) {
    RDKFuncsPINVOKE.SubstanceGroup_setIsValid(swigCPtr, isValid);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getIndexInMol() {
    uint ret = RDKFuncsPINVOKE.SubstanceGroup_getIndexInMol(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void addAtomWithIdx(uint idx) {
    RDKFuncsPINVOKE.SubstanceGroup_addAtomWithIdx(swigCPtr, idx);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addParentAtomWithIdx(uint idx) {
    RDKFuncsPINVOKE.SubstanceGroup_addParentAtomWithIdx(swigCPtr, idx);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addBondWithIdx(uint idx) {
    RDKFuncsPINVOKE.SubstanceGroup_addBondWithIdx(swigCPtr, idx);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addAtomWithBookmark(int mark) {
    RDKFuncsPINVOKE.SubstanceGroup_addAtomWithBookmark(swigCPtr, mark);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addParentAtomWithBookmark(int mark) {
    RDKFuncsPINVOKE.SubstanceGroup_addParentAtomWithBookmark(swigCPtr, mark);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addBondWithBookmark(int mark) {
    RDKFuncsPINVOKE.SubstanceGroup_addBondWithBookmark(swigCPtr, mark);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addBracket(SWIGTYPE_p_std__arrayT_RDGeom__Point3D_3_t bracket) {
    RDKFuncsPINVOKE.SubstanceGroup_addBracket(swigCPtr, SWIGTYPE_p_std__arrayT_RDGeom__Point3D_3_t.getCPtr(bracket));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addCState(uint bondIdx, Point3D vector) {
    RDKFuncsPINVOKE.SubstanceGroup_addCState(swigCPtr, bondIdx, Point3D.getCPtr(vector));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addAttachPoint(uint aIdx, int lvIdx, string idStr) {
    RDKFuncsPINVOKE.SubstanceGroup_addAttachPoint(swigCPtr, aIdx, lvIdx, idStr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public SubstanceGroup.BondType getBondType(uint bondIdx) {
    SubstanceGroup.BondType ret = (SubstanceGroup.BondType)RDKFuncsPINVOKE.SubstanceGroup_getBondType(swigCPtr, bondIdx);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UInt_Vect getParentAtoms() {
    UInt_Vect ret = new UInt_Vect(RDKFuncsPINVOKE.SubstanceGroup_getParentAtoms(swigCPtr), false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setAtoms(UInt_Vect atoms) {
    RDKFuncsPINVOKE.SubstanceGroup_setAtoms(swigCPtr, UInt_Vect.getCPtr(atoms));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setParentAtoms(UInt_Vect patoms) {
    RDKFuncsPINVOKE.SubstanceGroup_setParentAtoms(swigCPtr, UInt_Vect.getCPtr(patoms));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setBonds(UInt_Vect bonds) {
    RDKFuncsPINVOKE.SubstanceGroup_setBonds(swigCPtr, UInt_Vect.getCPtr(bonds));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clearBrackets() {
    RDKFuncsPINVOKE.SubstanceGroup_clearBrackets(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clearCStates() {
    RDKFuncsPINVOKE.SubstanceGroup_clearCStates(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clearAttachPoints() {
    RDKFuncsPINVOKE.SubstanceGroup_clearAttachPoints(swigCPtr);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool adjustToRemovedAtom(uint atomIdx) {
    bool ret = RDKFuncsPINVOKE.SubstanceGroup_adjustToRemovedAtom(swigCPtr, atomIdx);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool includesAtom(uint atomIdx) {
    bool ret = RDKFuncsPINVOKE.SubstanceGroup_includesAtom(swigCPtr, atomIdx);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool adjustToRemovedBond(uint bondIdx) {
    bool ret = RDKFuncsPINVOKE.SubstanceGroup_adjustToRemovedBond(swigCPtr, bondIdx);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool includesBond(uint bondIdx) {
    bool ret = RDKFuncsPINVOKE.SubstanceGroup_includesBond(swigCPtr, bondIdx);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setOwningMol(ROMol mol) {
    RDKFuncsPINVOKE.SubstanceGroup_setOwningMol(swigCPtr, ROMol.getCPtr(mol));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public Int_Vect getAtoms() {
    Int_Vect ret = new Int_Vect(RDKFuncsPINVOKE.SubstanceGroup_getAtoms(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Int_Vect getBonds() {
    Int_Vect ret = new Int_Vect(RDKFuncsPINVOKE.SubstanceGroup_getBonds(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Int_Vect getSgParentAtoms() {
    Int_Vect ret = new Int_Vect(RDKFuncsPINVOKE.SubstanceGroup_getSgParentAtoms(swigCPtr), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__arrayT_RDGeom__Point3D_3_t getBracket(uint idx) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.SubstanceGroup_getBracket(swigCPtr, idx);
    SWIGTYPE_p_std__arrayT_RDGeom__Point3D_3_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__arrayT_RDGeom__Point3D_3_t(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SubstanceGroup.CState getCState(uint idx) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.SubstanceGroup_getCState(swigCPtr, idx);
    SubstanceGroup.CState ret = (cPtr == global::System.IntPtr.Zero) ? null : new SubstanceGroup.CState(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SubstanceGroup.AttachPoint getAttachPoint(uint idx) {
    global::System.IntPtr cPtr = RDKFuncsPINVOKE.SubstanceGroup_getAttachPoint(swigCPtr, idx);
    SubstanceGroup.AttachPoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new SubstanceGroup.AttachPoint(cPtr, false);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void getStringProp(string key, SWIGTYPE_p_std__string res) {
    RDKFuncsPINVOKE.SubstanceGroup_getStringProp__SWIG_0(swigCPtr, key, SWIGTYPE_p_std__string.getCPtr(res));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getStringProp(string key) {
    string ret = RDKFuncsPINVOKE.SubstanceGroup_getStringProp__SWIG_1(swigCPtr, key);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void getUIntProp(string key, SWIGTYPE_p_unsigned_int res) {
    RDKFuncsPINVOKE.SubstanceGroup_getUIntProp__SWIG_0(swigCPtr, key, SWIGTYPE_p_unsigned_int.getCPtr(res));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getUIntProp(string key) {
    uint ret = RDKFuncsPINVOKE.SubstanceGroup_getUIntProp__SWIG_1(swigCPtr, key);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void getStringVectProp(string key, Str_Vect res) {
    RDKFuncsPINVOKE.SubstanceGroup_getStringVectProp__SWIG_0(swigCPtr, key, Str_Vect.getCPtr(res));
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
  }

  public Str_Vect getStringVectProp(string key) {
    Str_Vect ret = new Str_Vect(RDKFuncsPINVOKE.SubstanceGroup_getStringVectProp__SWIG_1(swigCPtr, key), true);
    if (RDKFuncsPINVOKE.SWIGPendingException.Pending) throw RDKFuncsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum BondType {
    XBOND,
    CBOND
  }

}

}
